<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-geWF76RCwLtnZ8qwWowPQNguL3RmwHVBC9FhGdlKrxdiJJigb/j/68SIy3Te4Bkz" crossorigin="anonymous"></script>
<script src="/js/app.js"></script>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.0/jquery-ui.min.js"></script>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.13.0/themes/base/jquery-ui.css">

<!-- js for date  -->

<script>
  $(document).ready(function () {
    $("#job-start-date").datepicker({
      dateFormat: "dd-mm-yy", // Modify the date format as per your preference
      changeMonth: true,
      changeYear: true
    });
  });
</script>

<!-- js for phone number validation  -->

<script>
  document.addEventListener("DOMContentLoaded", function () {
    var contactNumberInput = document.getElementById("contact-number");
    var contactNumberValidation = document.getElementById("contact-number-validation");

    contactNumberInput.addEventListener("input", function () {
      var contactNumber = this.value.trim();
      var validPhoneNumber = /^\d{10}$/; // Regex to match exactly 10 digits

      if (validPhoneNumber.test(contactNumber)) {
        contactNumberValidation.textContent = ""; // Clear any previous error message
      } else {
        contactNumberValidation.textContent = "Enter a valid 10-digit contact number";
      }
    });
  });
</script>

<!-- Problem details  -->

<script>
  document.addEventListener("DOMContentLoaded", function () {
    var shortProblemDetailInput = document.getElementById("short-problem-detail");
    var shortProblemDetailCounter = document.getElementById("short-problem-detail-counter");
    var shortProblemDetailValidation = document.getElementById("short-problem-detail-validation");

    var exactLocationInput = document.getElementById("exact-location");
    var exactLocationCounter = document.getElementById("exact-location-counter");
    var exactLocationValidation = document.getElementById("exact-location-validation");

    shortProblemDetailInput.addEventListener("input", function () {
      var shortProblemDetail = this.value.trim();
      var remainingChars = 30 - shortProblemDetail.length;

      shortProblemDetailCounter.textContent = remainingChars + " characters remaining";

      if (remainingChars >= 0) {
        shortProblemDetailValidation.textContent = "";
      } else {
        shortProblemDetailValidation.textContent = "Exceeded the character limit";
      }
    });

    exactLocationInput.addEventListener("input", function () {
      var exactLocation = this.value.trim();
      var remainingChars = 90 - exactLocation.length;

      exactLocationCounter.textContent = remainingChars + " characters remaining";

      if (remainingChars >= 0) {
        exactLocationValidation.textContent = "";
      } else {
        exactLocationValidation.textContent = "Exceeded the character limit";
      }
    });
  });
</script>

<!-- notification navbar  -->

<script>
  document.addEventListener("DOMContentLoaded", function () {
    var userNameSpan = document.getElementById("user-name");
    var nameInput = document.getElementById("name");

    nameInput.addEventListener("input", function () {
      var name = this.value.trim();
      userNameSpan.textContent = name;
    });
  });
</script>

<!-- email validation  -->

<script>
  // Function to validate email
  function validateEmail() {
    const emailInput = document.getElementById("email");
    const emailError = document.getElementById("email-error");

    // Regular expression for email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!emailRegex.test(emailInput.value)) {
      emailError.textContent = "Please enter a valid email address.";
      return false;
    } else {
      emailError.textContent = "";
      return true;
    }
  }

  // Event listener for input change
  document.getElementById("email").addEventListener("input", validateEmail);
</script>

<!-- personal detail functionality  -->


<script>
  function populateData() {
    var pnoSelect = document.getElementById("pno");
    var nameInput = document.getElementById("name");
    var emailInput = document.getElementById("email");

    // Get the selected option's value
    var selectedPno = pnoSelect.value;

    // Perform a lookup based on the selected value
    var data = {
      "1": {
        name: "John Doe",
        email: "john@example.com"
      },
      "2": {
        name: "Jane Smith",
        email: "jane@example.com"
      },
      "3": {
        name: "Bob Johnson",
        email: "bob@example.com"
      }
    };

    // Populate the name and email inputs
    if (data[selectedPno]) {
      nameInput.value = data[selectedPno].name;
      emailInput.value = data[selectedPno].email;
      document.getElementById("email-error").textContent = ""; // Clear any previous error message
      // Make the inputs read-only
      nameInput.readOnly = true;
      emailInput.readOnly = true;
      // Set font-weight to bold
      nameInput.style.fontWeight = "bold";
      emailInput.style.fontWeight = "bold";

    } else {
      nameInput.value = "";
      emailInput.value = "";
      document.getElementById("email-error").textContent = "Invalid P no"; // Display an error message
      // Make the inputs editable
      nameInput.readOnly = false;
      emailInput.readOnly = false;
      // Reset font-weight
      nameInput.style.fontWeight = "normal";
      emailInput.style.fontWeight = "normal";
    }
  }

</script>

<!-- approver details drop down selection functionality  -->

<script>
  function updateApprovers() {
    var costCentreSelect = document.getElementById("cost-centre");
    var headApproverSelect = document.getElementById("select-head");
    var altApproverSelect = document.getElementById("select-alt-app");

    var selectedCostCentre = costCentreSelect.value;

    // Reset the values of head and alternate approver selects
    headApproverSelect.value = "";
    altApproverSelect.value = "";

    // Hide options in head and alternate approver selects based on selected cost centre
    var headOptions = headApproverSelect.querySelectorAll("option");
    var altOptions = altApproverSelect.querySelectorAll("option");

    headOptions.forEach(function(option) {
      option.style.display = option.getAttribute("data-cost-centre") === selectedCostCentre || option.value === "" ? "block" : "none";
    });

    altOptions.forEach(function(option) {
      option.style.display = option.getAttribute("data-cost-centre") === selectedCostCentre || option.value === "" ? "block" : "none";
    });
  }
</script>



<!-- scrip for hierarchical view of service provider details  -->

<script>
  var planningPlantData = [
    {
      name: "Animals",
      children: [
        {
          name: "Carnivore",
          children: [
            { name: "Lion" },
            { name: "Tiger" }
          ]
        },
        {
          name: "Herbivore",
          children: [
            { name: "Cow" },
            { name: "Deer" }
          ]
        },
        {
          name: "Omnivore",
          children: [
            { name: "Crow" },
            { name: "Bear" }
          ]
        }
      ]
    }
  ];

  var selectedPlanningPlant = "";
  var selectedServiceDepartment = "";
  var selectedPlannerGroup = "";
  var selectedWorkCenter = "";

  function openPlanningPlantPopup() {
    var planningPlantTree = document.getElementById("planning-plant-tree");
    planningPlantTree.innerHTML = ""; // Clear the tree

    // Create the planning plant tree view
    planningPlantData.forEach(function (plant) {
      var li = createCheckboxTreeItem(plant.name);
      planningPlantTree.appendChild(li);
      createChildrenCheckboxTree(plant.children, li);
    });

    document.getElementById("planning-plant-popup").style.display = "flex";
  }

  function createCheckboxTreeItem(name) {
    var li = document.createElement("li");
    var checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.id = name;
    var label = document.createElement("label");
    label.setAttribute("for", name);
    label.textContent = name;
    li.appendChild(checkbox);
    li.appendChild(label);
    return li;
  }

  function createChildrenCheckboxTree(children, parentElement) {
    var ul = document.createElement("ul");
    children.forEach(function (child) {
      var li = createCheckboxTreeItem(child.name);
      ul.appendChild(li);
      if (child.children) {
        createChildrenCheckboxTree(child.children, li);
      }
    });
    parentElement.appendChild(ul);
  }

  function selectPlanningPlant() {
    var selectedPlanningPlantCheckbox = document.querySelector("#planning-plant-tree input:checked");
    if (selectedPlanningPlantCheckbox) {
      selectedPlanningPlant = selectedPlanningPlantCheckbox.id;
      document.getElementById("planning-plant").value = selectedPlanningPlant;
      document.getElementById("planning-plant-popup").style.display = "none";
      openServiceDepartmentPopup();
    }
  }

  function cancelPlanningPlantSelection() {
    selectedPlanningPlant = "";
    document.getElementById("planning-plant").value = "";
    document.getElementById("planning-plant-popup").style.display = "none";
  }

  function openServiceDepartmentPopup() {
    var serviceDepartmentTree = document.getElementById("service-department-tree");
    serviceDepartmentTree.innerHTML = ""; // Clear the tree

    // Create the service department tree view based on the selected planning plant
    var selectedPlant = planningPlantData.find(function (plant) {
      return plant.name === selectedPlanningPlant;
    });

    if (selectedPlant && selectedPlant.children) {
      selectedPlant.children.forEach(function (department) {
        var li = createCheckboxTreeItem(department.name);
        serviceDepartmentTree.appendChild(li);
        createChildrenCheckboxTree(department.children, li);
      });
    }

    document.getElementById("service-department-popup").style.display = "flex";
  }

  function selectServiceDepartment() {
    var selectedServiceDepartmentCheckbox = document.querySelector("#service-department-tree input:checked");
    if (selectedServiceDepartmentCheckbox) {
      selectedServiceDepartment = selectedServiceDepartmentCheckbox.id;
      document.getElementById("service-department").value = selectedServiceDepartment;
      document.getElementById("service-department-popup").style.display = "none";
      openPlannerGroupPopup();
    }
  }

  function cancelServiceDepartmentSelection() {
    selectedServiceDepartment = "";
    document.getElementById("service-department").value = "";
    document.getElementById("service-department-popup").style.display = "none";
  }

  function openPlannerGroupPopup() {
    var plannerGroupTree = document.getElementById("planner-group-tree");
    plannerGroupTree.innerHTML = ""; // Clear the tree

    // Create the planner group tree view based on the selected service department
    // Here, you can dynamically fetch the child values for the selected service department
    // and populate the corresponding popups or lists.
    // For simplicity, let's assume static values for the child options.
    var selectedDepartment = planningPlantData
      .find(function (plant) {
        return plant.name === selectedPlanningPlant;
      })
      .children.find(function (department) {
        return department.name === selectedServiceDepartment;
      });

    if (selectedDepartment && selectedDepartment.children) {
      selectedDepartment.children.forEach(function (group) {
        var li = createCheckboxTreeItem(group.name);
        plannerGroupTree.appendChild(li);
      });
    }

    document.getElementById("planner-group-popup").style.display = "flex";
  }

  function selectPlannerGroup() {
    var selectedPlannerGroupCheckbox = document.querySelector("#planner-group-tree input:checked");
    if (selectedPlannerGroupCheckbox) {
      selectedPlannerGroup = selectedPlannerGroupCheckbox.id;
      document.getElementById("planner-group").value = selectedPlannerGroup;
      document.getElementById("planner-group-popup").style.display = "none";
      openWorkCenterPopup();
    }
  }

  function cancelPlannerGroupSelection() {
    selectedPlannerGroup = "";
    document.getElementById("planner-group").value = "";
    document.getElementById("planner-group-popup").style.display = "none";
  }

  function openWorkCenterPopup() {
    var workCenterTree = document.getElementById("work-center-tree");
    workCenterTree.innerHTML = ""; // Clear the tree

    // Create the work center tree view based on the selected planner group
    // Here, you can dynamically fetch the child values for the selected planner group
    // and populate the corresponding popups or lists.
    // For simplicity, let's assume static values for the child options.
    var selectedGroup = planningPlantData
      .find(function (plant) {
        return plant.name === selectedPlanningPlant;
      })
      .children.find(function (department) {
        return department.name === selectedServiceDepartment;
      })
      .children.find(function (group) {
        return group.name === selectedPlannerGroup;
      });

    if (selectedGroup && selectedGroup.children) {
      selectedGroup.children.forEach(function (workCenter) {
        var li = createCheckboxTreeItem(workCenter.name);
        workCenterTree.appendChild(li);
      });
    }

    document.getElementById("work-center-popup").style.display = "flex";
  }

  function selectWorkCenter() {
    var selectedWorkCenterCheckbox = document.querySelector("#work-center-tree input:checked");
    if (selectedWorkCenterCheckbox) {
      selectedWorkCenter = selectedWorkCenterCheckbox.id;
      document.getElementById("work-center").value = selectedWorkCenter;
      document.getElementById("work-center-popup").style.display = "none";
    }
  }

  function cancelWorkCenterSelection() {
    selectedWorkCenter = "";
    document.getElementById("work-center").value = "";
    document.getElementById("work-center-popup").style.display = "none";
  }
</script>